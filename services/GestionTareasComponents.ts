/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useGestionTareasContext, GestionTareasContext } from "./GestionTareasContext";
import type * as Fetcher from "./GestionTareasFetcher";
import { GestionTareasFetch } from "./GestionTareasFetcher";
import type * as Schemas from "./GestionTareasSchemas";

export type TareaPlantarSemillaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaPlantarSemillaVariables = GestionTareasContext["fetcherOptions"];

export const fetchTareaPlantarSemilla = (
  variables: TareaPlantarSemillaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaPlantarSemillaError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/Tarea/seed", method: "post", ...variables, signal });

export const useTareaPlantarSemilla = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaPlantarSemillaError,
      TareaPlantarSemillaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaPlantarSemillaError,
    TareaPlantarSemillaVariables
  >(
    (variables: TareaPlantarSemillaVariables) =>
      fetchTareaPlantarSemilla({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaReiniciarTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaReiniciarTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaReiniciarTareaVariables = {
  pathParams: TareaReiniciarTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaReiniciarTarea = (
  variables: TareaReiniciarTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaReiniciarTareaError,
    undefined,
    {},
    {},
    TareaReiniciarTareaPathParams
  >({
    url: "/api/Tarea/{id}/reiniciarTarea",
    method: "put",
    ...variables,
    signal,
  });

export const useTareaReiniciarTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaReiniciarTareaError,
      TareaReiniciarTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaReiniciarTareaError,
    TareaReiniciarTareaVariables
  >(
    (variables: TareaReiniciarTareaVariables) =>
      fetchTareaReiniciarTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaObtenerTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaObtenerTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaObtenerTareaVariables = {
  pathParams: TareaObtenerTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaObtenerTarea = (
  variables: TareaObtenerTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.ObtenerTareaResponseCustomResponse,
    TareaObtenerTareaError,
    undefined,
    {},
    {},
    TareaObtenerTareaPathParams
  >({
    url: "/api/Tarea/{id}/obtenerTarea",
    method: "get",
    ...variables,
    signal,
  });

export const useTareaObtenerTarea = <
  TData = Schemas.ObtenerTareaResponseCustomResponse
>(
  variables: TareaObtenerTareaVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObtenerTareaResponseCustomResponse,
      TareaObtenerTareaError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGestionTareasContext(options);
  return reactQuery.useQuery<
    Schemas.ObtenerTareaResponseCustomResponse,
    TareaObtenerTareaError,
    TData
  >(
    queryKeyFn({
      path: "/api/Tarea/{id}/obtenerTarea",
      operationId: "tareaObtenerTarea",
      variables,
    }),
    ({ signal }) =>
      fetchTareaObtenerTarea({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TareaObtenerTareasError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaObtenerTareasVariables = GestionTareasContext["fetcherOptions"];

export const fetchTareaObtenerTareas = (
  variables: TareaObtenerTareasVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.ObtenerTareaResponseListCustomResponse,
    TareaObtenerTareasError,
    undefined,
    {},
    {},
    {}
  >({ url: "/api/Tarea/obtenerTareas", method: "get", ...variables, signal });

export const useTareaObtenerTareas = <
  TData = Schemas.ObtenerTareaResponseListCustomResponse
>(
  variables: TareaObtenerTareasVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObtenerTareaResponseListCustomResponse,
      TareaObtenerTareasError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGestionTareasContext(options);
  return reactQuery.useQuery<
    Schemas.ObtenerTareaResponseListCustomResponse,
    TareaObtenerTareasError,
    TData
  >(
    queryKeyFn({
      path: "/api/Tarea/obtenerTareas",
      operationId: "tareaObtenerTareas",
      variables,
    }),
    ({ signal }) =>
      fetchTareaObtenerTareas({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type TareaModificarTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaModificarTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaModificarTareaVariables = {
  body?: Schemas.ModificarTareaRequest;
  pathParams: TareaModificarTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaModificarTarea = (
  variables: TareaModificarTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaModificarTareaError,
    Schemas.ModificarTareaRequest,
    {},
    {},
    TareaModificarTareaPathParams
  >({
    url: "/api/Tarea/{id}/modificarTarea",
    method: "put",
    ...variables,
    signal,
  });

export const useTareaModificarTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaModificarTareaError,
      TareaModificarTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaModificarTareaError,
    TareaModificarTareaVariables
  >(
    (variables: TareaModificarTareaVariables) =>
      fetchTareaModificarTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaIniciarTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaIniciarTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaIniciarTareaVariables = {
  pathParams: TareaIniciarTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaIniciarTarea = (
  variables: TareaIniciarTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaIniciarTareaError,
    undefined,
    {},
    {},
    TareaIniciarTareaPathParams
  >({
    url: "/api/Tarea/{id}/iniciarTarea",
    method: "put",
    ...variables,
    signal,
  });

export const useTareaIniciarTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaIniciarTareaError,
      TareaIniciarTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaIniciarTareaError,
    TareaIniciarTareaVariables
  >(
    (variables: TareaIniciarTareaVariables) =>
      fetchTareaIniciarTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaFinalizarTareaTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaFinalizarTareaTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaFinalizarTareaTareaVariables = {
  pathParams: TareaFinalizarTareaTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaFinalizarTareaTarea = (
  variables: TareaFinalizarTareaTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaFinalizarTareaTareaError,
    undefined,
    {},
    {},
    TareaFinalizarTareaTareaPathParams
  >({
    url: "/api/Tarea/{id}/finalizarTareaTarea",
    method: "put",
    ...variables,
    signal,
  });

export const useTareaFinalizarTareaTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaFinalizarTareaTareaError,
      TareaFinalizarTareaTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaFinalizarTareaTareaError,
    TareaFinalizarTareaTareaVariables
  >(
    (variables: TareaFinalizarTareaTareaVariables) =>
      fetchTareaFinalizarTareaTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaEliminarTareaPathParams = {
  /**
   * @format uuid
   */
  id: string;
};

export type TareaEliminarTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaEliminarTareaVariables = {
  pathParams: TareaEliminarTareaPathParams;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaEliminarTarea = (
  variables: TareaEliminarTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.BooleanCustomResponse,
    TareaEliminarTareaError,
    undefined,
    {},
    {},
    TareaEliminarTareaPathParams
  >({ url: "/api/Tarea/{id}", method: "delete", ...variables, signal });

export const useTareaEliminarTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.BooleanCustomResponse,
      TareaEliminarTareaError,
      TareaEliminarTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.BooleanCustomResponse,
    TareaEliminarTareaError,
    TareaEliminarTareaVariables
  >(
    (variables: TareaEliminarTareaVariables) =>
      fetchTareaEliminarTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaCrearTareaError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaCrearTareaVariables = {
  body?: Schemas.CrearTareaRequest;
} & GestionTareasContext["fetcherOptions"];

export const fetchTareaCrearTarea = (
  variables: TareaCrearTareaVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.CrearTareaResponseCustomResponse,
    TareaCrearTareaError,
    Schemas.CrearTareaRequest,
    {},
    {},
    {}
  >({ url: "/api/Tarea/crear", method: "post", ...variables, signal });

export const useTareaCrearTarea = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.CrearTareaResponseCustomResponse,
      TareaCrearTareaError,
      TareaCrearTareaVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useGestionTareasContext();
  return reactQuery.useMutation<
    Schemas.CrearTareaResponseCustomResponse,
    TareaCrearTareaError,
    TareaCrearTareaVariables
  >(
    (variables: TareaCrearTareaVariables) =>
      fetchTareaCrearTarea({ ...fetcherOptions, ...variables }),
    options
  );
};

export type TareaObtenerCategoriasError = Fetcher.ErrorWrapper<{
  status: 400;
  payload: Schemas.ObjectCustomResponse;
}>;

export type TareaObtenerCategoriasVariables = GestionTareasContext["fetcherOptions"];

export const fetchTareaObtenerCategorias = (
  variables: TareaObtenerCategoriasVariables,
  signal?: AbortSignal
) =>
  GestionTareasFetch<
    Schemas.ObtenerCategoriasResponseListCustomResponse,
    TareaObtenerCategoriasError,
    undefined,
    {},
    {},
    {}
  >({
    url: "/api/Tarea/obtenerCategorias",
    method: "get",
    ...variables,
    signal,
  });

export const useTareaObtenerCategorias = <
  TData = Schemas.ObtenerCategoriasResponseListCustomResponse
>(
  variables: TareaObtenerCategoriasVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.ObtenerCategoriasResponseListCustomResponse,
      TareaObtenerCategoriasError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useGestionTareasContext(options);
  return reactQuery.useQuery<
    Schemas.ObtenerCategoriasResponseListCustomResponse,
    TareaObtenerCategoriasError,
    TData
  >(
    queryKeyFn({
      path: "/api/Tarea/obtenerCategorias",
      operationId: "tareaObtenerCategorias",
      variables,
    }),
    ({ signal }) =>
      fetchTareaObtenerCategorias({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type QueryOperation =
  | {
      path: "/api/Tarea/{id}/obtenerTarea";
      operationId: "tareaObtenerTarea";
      variables: TareaObtenerTareaVariables;
    }
  | {
      path: "/api/Tarea/obtenerTareas";
      operationId: "tareaObtenerTareas";
      variables: TareaObtenerTareasVariables;
    }
  | {
      path: "/api/Tarea/obtenerCategorias";
      operationId: "tareaObtenerCategorias";
      variables: TareaObtenerCategoriasVariables;
    };
